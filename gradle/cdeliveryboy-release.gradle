//Continuous Delivery release configuration with CDeliveryBoy

apply plugin: 'info.solidsoft.cdeliveryboy'

cDeliveryBoy {
    tasks {
        promoteRepositoryTask = "releaseRepository"
    }
    nexus {
        autoPromote = true
    }
}

nexusStaging {
    packageGroup = "info.solidsoft"
    stagingProfileId = "34a3a5beeaa96"
}

scmVersion {
    versionIncrementer 'incrementPatch'
    hooks {
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /classpath\ 'info\.solidsoft\.gradle\.pitest:gradle-pitest-plugin:$previousVersion'/ },
                           replacement: { currentVersion, context -> /classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:$currentVersion'/ }]
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /id\ 'info\.solidsoft\.pitest'\ version\ '$previousVersion'/ },
                           replacement: { currentVersion, context -> /id 'info.solidsoft.pitest' version '$currentVersion'/ }]
        pre 'fileUpdate', [file       : 'CHANGELOG.md', pattern: { previousVersion, context -> /^##\ ${context.currentVersion}\ -\ Unreleased$/ },
                           replacement: { currentVersion, context -> /## $currentVersion - ${new Date().format( 'yyyy-MM-dd' )}/ }]
    }
}

group = 'info.solidsoft.gradle.pitest'
//Beware: All release/version related changes should be put before that line which triggers (lazy) version evaluation
project.version = scmVersion.version

String repoSlug = 'gradle-pitest-plugin'
modifyPom {
    project {
        name 'Gradle PIT Plugin'
        description 'Gradle plugin for PIT Mutation Testing'
        url 'http://gradle-pitest-plugin.solidsoft.info/'
        inceptionYear '2012'

        scm {
            url "https://github.com/szpak/${repoSlug}"
            connection "scm:git:git://github.com/szpak/${repoSlug}.git"
            developerConnection "scm:git:git@github.com:szpak/${repoSlug}.git"
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin ZajÄ…czkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'despot'
                    role 'developer'
                }
            }
        }
    }
}

if (hasProperty('pluginPortal')) {

    apply plugin: 'com.gradle.plugin-publish'

    pluginBundle {
        website = 'https://github.com/szpak/gradle-pitest-plugin'
        vcsUrl = 'https://github.com/szpak/gradle-pitest-plugin'

        plugins {
            plugin {
                id = 'info.solidsoft.pitest'
                displayName = 'gradle-pitest-plugin'
                description = 'Gradle plugin for PIT mutation testing'
                tags = ['test', 'pit', 'mutation-testing']
            }
        }

        mavenCoordinates {
            groupId = project.group
            artifactId = project.name
        }
    }

    publishPlugins {
        onlyIf { ciBuild.inReleaseMode }
        mustRunAfter releaseRepository
    }
    ciBuild.dependsOn publishPlugins
}

if (hasProperty('changelogSync')) {

    task syncChangelog(type: Exec) {
        doFirst { logger.info("Synchronizing changelog with GitHub for version ${project.version}") }
        commandLine 'chandler', 'push', "release/${project.version}", '--tag-prefix=release/'
    }

    syncChangelog {
        onlyIf { ciBuild.inReleaseMode }
        mustRunAfter releaseRepository
        if (project.tasks.findByName("publishPlugins")) {
            mustRunAfter publishPlugins
        }
    }
    ciBuild.dependsOn syncChangelog
}
