apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

scmVersion {
    tag {
        prefix = 'release'
        versionSeparator = '/'
    }
    versionIncrementer 'incrementPatch'
    hooks {
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /classpath\ 'info\.solidsoft\.gradle\.pitest:gradle-pitest-plugin:$previousVersion'/ },
                           replacement: { currentVersion, context -> /classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:$currentVersion'/ }]
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /id\ 'info\.solidsoft\.pitest'\ version\ '$previousVersion'/ },
                           replacement: { currentVersion, context -> /id 'info.solidsoft.pitest' version '$currentVersion'/ }]
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /pitestVersion\ =\ '$previousVersion'/ },
                           replacement: { currentVersion, context -> /pitestVersion\ =\ '$currentVersion'/ }]
        pre 'fileUpdate', [file       : 'CHANGELOG.md', pattern: { previousVersion, context -> /^##\ ${context.currentVersion}\ -\ Unreleased$/ },
                           replacement: { currentVersion, context -> /## $currentVersion - ${new Date().format( 'yyyy-MM-dd' )}/ }]
    }
}

group = 'info.solidsoft.gradle.pitest'
//Beware: All release/version related changes should be put before that line which triggers (lazy) version evaluation
project.version = scmVersion.version

String repoSlug = 'szpak/gradle-pitest-plugin'
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Gradle PIT Plugin'
                description = 'Gradle plugin for PIT Mutation Testing'
                url = 'http://gradle-pitest-plugin.solidsoft.info/'
                inceptionYear = '2012'
                scm {
                    url = "https://github.com/${repoSlug}"
                    connection = "scm:git:git://github.com/${repoSlug}.git"
                    developerConnection = "scm:git:git@github.com:${repoSlug}.git"
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'szpak'
                        name = 'Marcin ZajÄ…czkowski'
                    }
                }
            }
        }
    }
}

signing {
    if (project.findProperty("signingKey")) {
        useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
    } else {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    //"required" is more tricky: "If the required condition does not hold true, artifacts will only be signed if signatory credentials are configured"
    onlyIf("Not for SNAPSHOTs or explicitly skipped") { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
}

nexusPublishing {
    repositories {
        sonatype {
            packageGroup = "info.solidsoft"
            stagingProfileId = "34a3a5beeaa96"
        }
    }
}

//in fact, plugins configuration is for java-gradle-plugin and only leverages in publish-plugin, so it could be moved to build.gradle
gradlePlugin {
    website = "https://github.com/${repoSlug}"
    vcsUrl = "https://github.com/${repoSlug}"
    plugins {
        pitestPlugin {
            id = 'info.solidsoft.pitest'
            implementationClass = 'info.solidsoft.gradle.pitest.PitestPlugin'
            displayName = 'gradle-pitest-plugin'
            description = 'Gradle plugin for PIT mutation testing'
            tags = ['test', 'pit', 'mutation-testing']
        }
        pitestAggregatorPlugin {
            id = 'info.solidsoft.pitest.aggregator'
            implementationClass = 'info.solidsoft.gradle.pitest.PitestAggregatorPlugin'
            displayName = 'gradle-pitest-aggregator-plugin'
            description = 'Gradle aggregator plugin for PIT mutation testing'
            tags = ['test', 'pit', 'mutation-testing']
        }
    }
}

if (hasProperty('pluginPortal')) {

    apply plugin: 'com.gradle.plugin-publish'

    publishPlugins {
        onlyIf("Not for SNAPSHOTs and when not explicitly enabled") { !project.version.endsWith("-SNAPSHOT") }
//        mustRunAfter releaseRepository
    }

}
