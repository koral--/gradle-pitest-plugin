plugins {
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'groovy'
    id 'maven-publish'
    id 'codenarc'
    id 'signing'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'com.vanniktech.maven.publish' version '0.25.3'
}

ext.pitestAggregatorVersion = "1.15.0"   //Must be equal to default PIT version in PitestPlugin

repositories {
    mavenCentral()
    mavenLocal()
    google()
}

sourceSets {
    funcTest
}

configurations {
    funcTest.extendsFrom(testImplementation, testRuntimeOnly, implementation)
}

dependencies {
    implementation localGroovy()
    compileOnly "org.pitest:pitest-aggregator:$pitestAggregatorVersion"
    implementation 'com.android.tools.build:gradle:8.5.1'
    implementation 'com.vdurmont:semver4j:3.1.0'

    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    //for "@Rule TemporaryFolder"
    testImplementation('org.spockframework:spock-junit4:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'net.bytebuddy:byte-buddy:1.14.18' //for Spying in Spock

    funcTestImplementation sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestImplementation sourceSets.test.output
    funcTestImplementation 'com.vdurmont:semver4j:3.1.0'
    funcTestImplementation 'com.android.tools.build:gradle:8.5.1'
    funcTestImplementation('com.netflix.nebula:nebula-test:10.6.1') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

tasks.register('funcTest', Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    forkEvery 1
    systemProperty('org.gradle.daemon', 'false')
    systemProperty('ignoreDeprecations', 'true') //FIXME remove after AGP stops using deprecated API
}

funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)
publishPlugins.dependsOn funcTest, check

tasks.register('testReport', TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

codenarc {
    toolVersion = "2.2.0"
}

tasks.register("codenarc") {
    configure {
        dependsOn tasks.withType(CodeNarc)
    }
}

//Workaround on https://github.com/gradle/gradle/issues/12663
tasks.withType(CodeNarc) { codeNarcTask ->
    codeNarcTask.finalizedBy(project.task("print${codeNarcTask.name.capitalize()}") {
        onlyIf {
            codeNarcTask.state.failure != null
        }
        doLast {
            logger.warn("\n****************************** CODE NARC ******************************")
            logger.warn(codeNarcTask.reports.text.destination.text.trim())
            logger.warn("****************************** CODE NARC ******************************\n")
        }
    })
}

gradlePlugin {
    website = POM_URL
    vcsUrl = POM_URL
    testSourceSets sourceSets.funcTest
    plugins {
        pitest {
            id = 'pl.droidsonroids.pitest'
            implementationClass = 'pl.droidsonroids.gradle.pitest.PitestPlugin'
            tags.addAll('pitest', 'android', 'mutation testing')
            displayName = POM_NAME
            description = POM_DESCRIPTION
            version = VERSION_NAME
            group = GROUP
        }
        pitestAggregator {
            id = 'pl.droidsonroids.pitest.aggregator'
            tags.addAll('pitest', 'android', 'mutation testing')
            implementationClass = 'pl.droidsonroids.gradle.pitest.PitestAggregatorPlugin'
            displayName = 'Android Gradle pitest aggregator plugin'
            description = POM_DESCRIPTION
        }
    }
}
