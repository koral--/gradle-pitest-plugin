import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

plugins {
    id 'com.github.ben-manes.versions' version '0.41.0'
    id 'groovy'
    id 'maven-publish'
    id 'codenarc'
    id 'signing'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.20.0'
    id 'com.vanniktech.maven.publish' version '0.18.0'
}

sourceCompatibility = 1.8

ext.pitestAggregatorVersion = "1.7.0"   //Must be equal to default PIT version in PitestPlugin

repositories {
    mavenCentral()
    mavenLocal()
    google()
}

sourceSets {
    funcTest
}

dependencies {
    implementation localGroovy()
    compileOnly "org.pitest:pitest-aggregator:$pitestAggregatorVersion"
    implementation 'com.android.tools.build:gradle:7.3.1'

    testImplementation('org.spockframework:spock-core:2.1-M2-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    //for "@Rule TemporaryFolder"
    testImplementation('org.spockframework:spock-junit4:2.1-M2-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'net.bytebuddy:byte-buddy:1.12.7' //for Spying in Spock

    funcTestImplementation sourceSets.main.output
    //to make production plugin classes visible in functional tests (it's not in testImplementation configuration)
    funcTestImplementation configurations.testImplementation
    funcTestRuntimeOnly configurations.testRuntimeOnly
    funcTestImplementation('com.netflix.nebula:nebula-test:10.2.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
        .getModule("gradle-tooling-api-builders")
        .classpath
        .asFiles
        .first()
    testRuntimeOnly(files(toolingApiBuildersJar))
}

task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs '-Xmx1g'
    forkEvery 1
    systemProperty('org.gradle.daemon', 'false')
    systemProperty('ignoreDeprecations', 'true') //FIXME remove after AGP stops using deprecated API
}

funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)
publishPlugins.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

codenarc {
    toolVersion = "2.0.0"
}

tasks.register("codenarc") {
    configure {
        dependsOn tasks.withType(CodeNarc)
    }
}

//Workaround on https://github.com/gradle/gradle/issues/12663
tasks.withType(CodeNarc) { codeNarcTask ->
    reports {
        text.enabled = true
        html.enabled = true
    }
    codeNarcTask.finalizedBy(project.task("print${codeNarcTask.name.capitalize()}") {
        onlyIf {
            codeNarcTask.state.failure != null
        }
        doLast {
            logger.warn("\n****************************** CODE NARC ******************************")
            logger.warn(codeNarcTask.reports.text.destination.text.trim())
            logger.warn("****************************** CODE NARC ******************************\n")
        }
    })
}

pluginBundle {
    website = POM_URL
    vcsUrl = POM_URL
    tags = ['pitest', 'android', 'mutation testing']
    description = POM_DESCRIPTION
    version = VERSION_NAME
    group = GROUP

    plugins {
        pitest {
            id = 'pl.droidsonroids.pitest'
            displayName = POM_NAME
        }
    }
}

gradlePlugin {
    testSourceSets sourceSets.funcTest
    plugins {
        pitest {
            id = 'pl.droidsonroids.pitest'
            implementationClass = 'pl.droidsonroids.gradle.pitest.PitestPlugin'
        }
        pitestAggregator {
            id = 'pl.droidsonroids.pitest.aggregator'
            implementationClass = 'pl.droidsonroids.gradle.pitest.PitestAggregatorPlugin'
        }
    }
}
