apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'codenarc'
//TODO: Introduce new releasing mechanism - CDBoy is not compatible with Gradle 7+ (due to using old 'maven' plugin)
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/report-version-consistency-check.gradle"
apply plugin: "com.github.ben-manes.versions"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            //for Plugin Publish plugin
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'pl.allegro.tech.build.axion-release:pl.allegro.tech.build.axion-release.gradle.plugin:1.18.18'
        classpath 'io.github.gradle-nexus.publish-plugin:io.github.gradle-nexus.publish-plugin.gradle.plugin:2.0.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:1.3.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.52.0'
    }
}

java {
    sourceCompatibility = 1.8
}

ext.pitestAggregatorVersion = "1.19.5"   //Must be equal to default PIT version in PitestPlugin

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    funcTest
}

configurations {
    funcTestImplementation.extendsFrom testImplementation
    funcTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation localGroovy()
    compileOnly "org.pitest:pitest-aggregator:$pitestAggregatorVersion"

    testImplementation('org.spockframework:spock-core:2.4-M6-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation 'net.bytebuddy:byte-buddy:1.17.5' //for Spying in Spock

    funcTestImplementation sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestImplementation sourceSets.test.output
    funcTestImplementation('com.netflix.nebula:nebula-test:10.6.2') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

tasks.register("funcTest", Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs '-Xmx1g'
}
funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)

//Both cannot be put into publishing.gradle due to: https://github.com/gradle/gradle/issues/1262
tasks.withType(com.gradle.publish.PublishTask).configureEach { it.dependsOn(funcTest, check) }
////do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

tasks.register("testReport", TestReport) {
    destinationDirectory = file(layout.buildDirectory.dir("reports/allTests"))
    testResults.from(test*.binaryResultsDirectory, funcTest*.binaryResultsDirectory)
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

tasks.validatePlugins {
    enableStricterValidation = true
    failOnWarning = true
}

codenarc {
    toolVersion = "2.0.0"
}

tasks.register("codenarc") {
    configure {
        dependsOn tasks.withType(CodeNarc)
    }
}

//Workaround on https://github.com/gradle/gradle/issues/12663
//TODO: "configureEach{}" causes: "DefaultTaskContainer#register(String, Action) on task set cannot be executed in the current context" - https://github.com/gradle/gradle/issues/26668
tasks.withType(CodeNarc) { codeNarcTask ->
    reports {
        text.required = true
        html.required = true
    }
    codeNarcTask.finalizedBy(tasks.register("print${codeNarcTask.name.capitalize()}") {
        onlyIf {
            codeNarcTask.state.failure != null
        }
        doLast {
            logger.warn("\n****************************** CODE NARC ******************************")
            logger.warn(codeNarcTask.reports.text.outputLocation.getAsFile().get().text.trim())
            logger.warn("****************************** CODE NARC ******************************\n")
        }
    })
}
